/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        qwerty {
            bindings = <&to 4>;
            key-positions = <37 40>;
            layers = <0>;
            timeout-ms = <1>;
            require-prior-idle-ms = <1000>;
        };

        return {
            bindings = <&to 0>;
            key-positions = <37 40>;
            layers = <4>;
            timeout-ms = <1>;
            require-prior-idle-ms = <1000>;
        };
    };

    macros {
        cedilha: cedilha {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(COMMA)>;
            label = "CEDILHA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp FSLH  &kp COMMA  &kp DOT           &kp P     &kp Y        &kp F    &kp G  &kp C       &kp R  &kp L  &kp BSPC
&kp LEFT_ALT  &kp A     &kp O      &kp E             &kp U     &kp I        &kp D    &kp H  &kp T       &kp N  &kp S  &kp GRAVE
&kp LSHFT     &cedilha  &kp SEMI   &kp Q             &kp J     &kp K        &kp X    &kp B  &kp W       &kp V  &kp Z  &kp RIGHT_ALT
                                   &kp LEFT_CONTROL  &kp LGUI  &kp SPACE    &kp RET  &to 1  &kp ESCAPE
            >;
        };

        symbols_numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH          &kp DLLR      &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK         &kp LPAR          &kp RPAR           &kp BACKSLASH
&kp LALT   &kp N1    &kp N2  &kp N3            &kp N4        &kp N5       &kp MINUS  &kp EQUAL  &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
&kp LSHFT  &kp N6    &kp N7  &kp N8            &kp N9        &kp N0       &kp UNDER  &kp PLUS   &kp LBRC          &kp RBRC          &kp PIPE           &kp LEFT_ALT
                             &kp LEFT_CONTROL  &kp LEFT_GUI  &kp SPACE    &kp RET    &to 2      &to 0
            >;
        };

        number_bt_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4            &kp F5        &kp F6          &kp F7      &kp F8      &kp F9                         &kp F10                &kp F11  &kp F12
&kp LSHFT   &to 0         &to 2         &to 1             &to 3         &to 4    &kp LEFT    &kp DOWN    &kp UP                         &kp RIGHT              &trans   &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4 &kp C_PREV  &kp C_NEXT  &mt C_BRIGHTNESS_DEC C_VOL_DN  &mt C_BRI_UP C_VOL_UP  &trans   &trans
                                        &kp LEFT_CONTROL  &kp LEFT_GUI  &kp SPACE       &kp RET     &to 3       &to 0
            >;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &kp MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &kp RET    &trans
                        &trans  &trans  &trans    &trans  &to 4   &trans
            >;
        };

        gaming {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E             &kp R         &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D             &kp F         &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C             &kp V         &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RALT
                         &kp LEFT_CONTROL  &kp LEFT_GUI  &kp SPACE    &kp RET  &to 2  &kp ESC
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        gaming {
            if-layers = <0 1>;
            then-layer = <4>;
        };
    };
};
